================
2-matrix_divided
================

Matrix Division Function
------------------------

Description:
    This module contains a function called 'matrix_divided' that divides all
    elements of a matrix by a given number.

Prototype:
    def matrix_divided(matrix, div):

Parameters:
    - `matrix` (list of lists): The input matrix containing integers or floats.
    - `div` (int or float): The divisor.

Returns:
    - list of lists: The new matrix with elements rounded to 2 decimal places.

Raises:
    - TypeError: If matrix is not a list of lists of integers or floats.
    - TypeError: If each row of the matrix does not have the same size.
    - TypeError: If div is not a number (integer or float).
    - ZeroDivisionError: If div is equal to 0.

Usage:

::
    
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    >>> divisor = 2
    >>> result = matrix_divided(matrix, divisor)
    >>> print(result)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]

::

    >>> matrix = [[1.5, 2.5, 3.5], [4.5, 5.5, 6.5]]
    >>> divisor = 2.5
    >>> result = matrix_divided(matrix, divisor)
    >>> print(result)
    [[0.6, 1.0, 1.4], [1.8, 2.2, 2.6]]

An identical TypeError is raised if ``matrix`` is not specifically a list of
lists.

::

    >>> matrix = [1, 2, 3]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

all the rows in ``matrix`` must be the same size.

::

    >>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8]]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

The parameter ``div`` must be either an int or float.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, "not a number"))
    Traceback (most recent call last):
    TypeError: div must be a number

``div`` must also be non-zero. Otherwise, a ZeroDivisionError is raised.

::

    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
